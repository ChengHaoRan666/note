# 是否开启保护模式
# 在保护模式下，如果 哨兵 没有明确绑定到一个特定的网络接口（例如 127.0.0.1），它只允许来自本地主机的连接，拒绝外部的连接请求。
protected-mode no

# 哨兵端口
port 26379

# 配置监听的端口
bind 0.0.0.0

# 是否以守护进程形式后台运行，如果 哨兵 被配置为以守护进程模式运行（daemonize yes），它会在系统的默认目录（通常是 /var/run）中生成一个 PID 文件
daemonize yes


# 自定义pid文件位置
pidfile /var/run/redis-sentinel.pid

# 设置日志文件名，如果为空则在控制台输出，如果选择以守护进程方式（daemonize yes）运行，则不会输出，在生产中建议设置日志文件名
logfile ""


# 用于解决 NAT（网络地址转换） 或其他复杂网络环境下的问题。它们允许 Redis Sentinel 在与其他 Sentinel 或 Redis 实例通信时，显式地指定自己的 IP 地址和端口号。
# sentinel announce-ip <ip>
# sentinel announce-port <port>


# 哨兵的工作目录
dir /opt/soft/redis-7.0.1/dumpfiles


# sentinel monitor <master-name> <ip> <redis-port> <quorum>
# <master-name>：作用: Redis 主节点的名称，用于标识监控的 Redis 主节点
# <ip>：作用：Redis 主节点的 IP 地址
# <redis-port>：作用：Redis 主节点的端口号
# <quorum>：作用：定义达到故障判断条件时需要的 Sentinel 数量，即至少Sentinel个哨兵认为该节点客观下线，该节点才会被标记为客观下线
sentinel monitor mymaster 127.0.0.1 6379 2
 

# 哨兵设置于主节点和从节点进行通信时的密码，前提是主节点设置了密码（requirepass ）
# sentinel auth-pass <master-name> <password>

# 对支持ACL用户列表的redis进行指定用户登录
# sentinel auth-user <master-name> <username>


# 哨兵在将某个 Redis 主节点（或其从节点、其他哨兵）标记为 主观下线 (S_DOWN) 状态之前，需要等待的时间，单位毫秒
sentinel down-after-milliseconds mymaster 30000






# 设置ACL日志的最大长度
acllog-max-len 128



# 使用外部ACL
# aclfile /etc/redis/sentinel-users.acl


# 为哨兵配置密码，当一个 Sentinel 设置了 requirepass，它会尝试用相同的密码与其他 Sentinel 进行认证
# requirepass <password>


# 指定哨兵在于其他哨兵连接时的用户名
# sentinel sentinel-user <username> 
# 指定哨兵在于其他哨兵连接时的密码
# sentinel sentinel-pass <password>


# 用于指定 Redis Sentinel 在故障转移过程中，同时重新配置为新主节点同步的从节点（replicas）的数量。
sentinel parallel-syncs mymaster 1


# sentinel failover-timeout <master-name> <milliseconds>
# sentinel failover-timeout 配置用于指定 Redis Sentinel 在故障转移操作中的超时时间（以毫秒为单位）。
# 该参数影响多个与故障转移相关的操作逻辑，定义了 Sentinel 如何管理和协调切换过程中的关键时间点。
sentinel failover-timeout mymaster 180000


# sentinel notification-script <master-name> <script-path>
# sentinel notification-script 用于指定一个脚本，当 Redis Sentinel 生成某些重要的警告级别事件时（例如主节点下线、故障转移等），会调用该脚本通知系统管理员或触发其他相关操作。
# sentinel notification-script mymaster /var/redis/notify.sh



# sentinel client-reconfig-script <master-name> <script-path>
# sentinel client-reconfig-script 用于在主从切换发生后调用指定脚本，以执行特定的任务，例如通知客户端配置更新、新主节点地址等。
# sentinel client-reconfig-script mymaster /var/redis/reconfig.sh


# sentinel deny-scripts-reconfig 用于控制是否允许在运行时通过 SENTINEL SET 命令修改 notification-script 和 client-reconfig-script 的路径配置。
# yes：禁止修改
# no：允许修改
sentinel deny-scripts-reconfig yes

# SENTINEL rename-command 用于支持在主节点或从节点中某些 Redis 命令被重命名的情况下，允许 Sentinel 使用新的命令名与 Redis 实例进行通信。
# SENTINEL rename-command <master-name> <original-command> <new-command>
# <master-name>: 被监控的主节点名称。
# <original-command>: Redis 原始命令名（如 CONFIG、SLAVEOF 等）。
# <new-command>: Redis 实际使用的新命令名。
# SENTINEL rename-command mymaster CONFIG GUESSME


# SENTINEL resolve-hostnames 用于控制 Redis Sentinel 是否支持使用主机名而非 IP 地址来配置主节点和从节点的地址。
SENTINEL resolve-hostnames no


# SENTINEL announce-hostnames 决定 Redis Sentinel 在向用户或其他服务暴露实例信息（如主节点和从节点的地址）时，是使用主机名还是解析后的 IP 地址。
# no：提供ip
# yes：提供地址
SENTINEL announce-hostnames no


# 该配置项控制 Sentinel 在主节点重启并返回 -LOADING 响应时的行为。
# 
# 默认行为（值为 0）：
# 
# Sentinel 在接收到主节点返回的 -LOADING 响应时，不会触发故障转移。
# 这是 Redis Sentinel 在 7.0 版本之前的唯一行为。
# 自定义行为（值大于 0）：
# 
# 配置为一个正整数（毫秒），表示允许 Sentinel 在主节点重启后的指定时间内接收 -LOADING 响应，而不触发故障转移。
# 如果超过该时间仍收到 -LOADING 响应，Sentinel 将判定主节点无法恢复并触发故障转移。
# 
SENTINEL master-reboot-down-after-period mymaster 0
